package com.example.iva_vpn

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Intent
import android.net.VpnService
import android.os.Build
import androidx.core.app.NotificationCompat
import com.wireguard.android.backend.GoBackend
import com.wireguard.android.backend.Tunnel
import com.wireguard.config.Config
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.launch

// ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –†–µ–∞–ª–∏–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Tunnel
class IvaVpnService : VpnService(), Tunnel {

    private val serviceScope = CoroutineScope(Dispatchers.IO + SupervisorJob())
    private var backend: GoBackend? = null
    private var tunnelName: String = "IvaVpnTunnel" // –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    companion object {
        const val VPN_CHANNEL_ID = "iva_vpn_channel"
        const val ACTION_START_VPN = "com.example.iva_vpn.START_VPN"
        const val ACTION_STOP_VPN = "com.example.iva_vpn.STOP_VPN"
    }

    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –†–µ–∞–ª–∏–∑—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    override fun getName(): String = tunnelName

    override fun onCreate() {
        super.onCreate()
        backend = GoBackend(this)
    }

    override fun onStateChange(state: Tunnel.State) {
        println("üì∂ –°–æ—Å—Ç–æ—è–Ω–∏–µ VPN –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: $state")
        // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–µ—à—å –æ–±–Ω–æ–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ UI –∑–¥–µ—Å—å
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        when (intent?.action) {
            ACTION_START_VPN -> {
                startVpn()
                return START_STICKY
            }
            ACTION_STOP_VPN -> {
                stopVpn()
                return START_NOT_STICKY
            }
            else -> {
                stopSelf()
                return START_NOT_STICKY
            }
        }
    }

    private fun startVpn() {
        serviceScope.launch {
            try {
                val configString = """
                    [Interface]
                    PrivateKey = PASTE_YOUR_PRIVATE_KEY_HERE
                    Address = 10.8.0.2/24
                    DNS = 8.8.8.8

                    [Peer]
                    PublicKey = PASTE_SERVER_PUBLIC_KEY_HERE
                    AllowedIPs = 0.0.0.0/0
                    Endpoint = YOUR_SERVER_IP:PORT
                """.trimIndent()

                val config = Config.parse(configString.byteInputStream())

                // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ setState
                backend?.setState(this@IvaVpnService, Tunnel.State.UP, config)

                showNotification(true)
                println("‚úÖ VPN –∑–∞–ø—É—â–µ–Ω!")

            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VPN: ${e.message}")
                e.printStackTrace()
                stopVpn()
            }
        }
    }

    private fun stopVpn() {
        serviceScope.launch {
            try {
                // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ setState
                backend?.setState(this@IvaVpnService, Tunnel.State.DOWN, null)
                println("üõë VPN –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ VPN: ${e.message}")
            } finally {
                stopForeground(STOP_FOREGROUND_REMOVE)
                stopSelf()
            }
        }
    }

    private fun showNotification(isConnected: Boolean) {
        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(VPN_CHANNEL_ID, "IVA VPN Service", NotificationManager.IMPORTANCE_DEFAULT)
            notificationManager.createNotificationChannel(channel)
        }
        val pendingIntent = PendingIntent.getActivity(this, 0, Intent(this, MainActivity::class.java), PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT)

        val notification = NotificationCompat.Builder(this, VPN_CHANNEL_ID)
            .setContentTitle("IVA VPN")
            .setContentText(if (isConnected) "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" else "–û—Ç–∫–ª—é—á–µ–Ω–æ")
            .setSmallIcon(R.mipmap.ic_launcher)
            .setContentIntent(pendingIntent)
            .build()

        startForeground(1, notification)
    }

    override fun onDestroy() {
        super.onDestroy()
        // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 5: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ getState
        if (backend?.getState(this) == Tunnel.State.UP) {
            stopVpn()
        }
        serviceScope.cancel()
        println("–°–µ—Ä–≤–∏—Å —É–Ω–∏—á—Ç–æ–∂–µ–Ω.")
    }
}